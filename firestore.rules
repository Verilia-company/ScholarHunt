rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper function to check if user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }    // Helper function to check if user is admin
    function isAdmin() {
      return isAuthenticated() && (
        // Check if user has admin role in Firestore
        (exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
         get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin') ||
        // Allow designated admin email (temporary fallback)
        request.auth.token.email == 'mutaawe38@gmail.com'
      );
    }

    // Helper function to check if user is a super admin (godlike permissions)
    function isSuperAdmin() {
      return isAuthenticated() && request.auth.token.email == 'mutaawe39@gmail.com';
    }
    
    // Helper function to check if user owns the document
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    // Helper function to validate scholarship data
    function isValidScholarship(data) {
      return data.keys().hasAll(['title', 'description', 'amount', 'deadline', 'status']) &&
        data.title is string && data.title.size() > 0 &&
        data.description is string && data.description.size() > 0 &&
        data.amount is string && data.amount.size() > 0 &&
        data.deadline is string &&
        data.status in ['active', 'draft', 'expired'];
    }
    
    // Helper function to validate blog post data
    function isValidBlogPost(data) {
      return data.keys().hasAll(['title', 'content', 'excerpt', 'author', 'status']) &&
        data.title is string && data.title.size() > 0 &&
        data.content is string && data.content.size() > 0 &&
        data.excerpt is string && data.excerpt.size() > 0 &&
        data.author is string && data.author.size() > 0 &&
        data.status in ['published', 'draft', 'archived'];
    }    // Users collection
    match /users/{userId} {
      // Users can read and write their own profile
      allow read, write: if isOwner(userId);
      
      // Admins can read all user profiles for management
      allow read: if isAdmin();
      
      // Admins can update user roles and basic info
      allow update: if isAdmin() && 
        request.resource.data.keys().hasAll(resource.data.keys()) &&
        // Only allow updating specific fields
        request.resource.data.keys().hasOnly(
          resource.data.keys().toSet().union(['role', 'isActive', 'updatedAt'].toSet())
        );
      
      // Allow creating user profile during registration
      allow create: if isOwner(userId) && 
        request.resource.data.keys().hasAll(['email', 'name', 'role', 'createdAt']) &&
        request.resource.data.role == 'user'; // New users default to 'user' role
        
      // Allow dev admin promotion (only in development)
      allow update: if isOwner(userId) && 
        request.resource.data.keys().hasOnly(['role']) &&
        request.resource.data.role == 'admin';
    }
    
    // Scholarships collection
    match /scholarships/{scholarshipId} {
      // Anyone can read published scholarships
      allow read: if true;
      
      // Admins can create, update, and delete scholarships
      allow create: if isAdmin() && isValidScholarship(request.resource.data);
      allow update: if isAdmin() && isValidScholarship(request.resource.data);
      allow delete: if isAdmin();
      
      // Scholarship views subcollection for analytics
      match /views/{viewId} {
        allow read, write: if isAuthenticated();
      }
    }
    
    // Blog posts collection  
    match /blog/{postId} {
      // Anyone can read published blog posts
      allow read: if resource.data.status == "published" || isAdmin();
      
      // Admins can create, update, and delete blog posts
      allow write: if isAdmin();
      
      // Blog comments subcollection
      match /comments/{commentId} {
        allow read: if true;
        allow create: if isAuthenticated() && 
          request.resource.data.keys().hasAll(['content', 'authorId', 'authorName', 'createdAt']) &&
          request.resource.data.authorId == request.auth.uid;
        allow update, delete: if isAuthenticated() && 
          (resource.data.authorId == request.auth.uid || isAdmin());
      }
    }
    
    // Newsletter subscriptions
    match /newsletter/{email} {
      // Allow anyone to subscribe (email validation done on client)
      allow create: if request.resource.data.keys().hasAll(['email', 'subscribedAt', 'isActive']) &&
        request.resource.data.email is string &&
        request.resource.data.email.matches('.*@.*\\..*') &&
        request.resource.data.isActive == true;
      
      // Allow unsubscribing with token
      allow update: if request.resource.data.keys().hasOnly(['isActive', 'unsubscribedAt']) &&
        request.resource.data.isActive == false;
      
      // Admins can read all subscriptions
      allow read: if isAdmin();
      allow delete: if isAdmin();
    }
    
    // User applications to scholarships
    match /applications/{applicationId} {
      // Users can read and write their own applications
      allow read, write: if isAuthenticated() && 
        request.auth.uid == resource.data.userId;
      
      // Admins can read all applications
      allow read: if isAdmin();
      
      // Application must have required fields
      allow create: if isAuthenticated() && 
        request.resource.data.keys().hasAll(['userId', 'scholarshipId', 'status', 'appliedAt']) &&
        request.resource.data.userId == request.auth.uid &&
        request.resource.data.status in ['draft', 'submitted', 'under_review', 'accepted', 'rejected'];
    }
    
    // Saved scholarships for users
    match /userSavedScholarships/{userId} {
      allow read, write: if isOwner(userId);
      
      // Subcollection for individual saved scholarships
      match /scholarships/{scholarshipId} {
        allow read, write: if isOwner(userId);
      }
    }
    
    // Scholarship submissions from public form
    match /scholarshipSubmissions/{submissionId} {
      // Anyone can create submissions
      allow create: if request.resource.data.keys().hasAll([
        'title', 'description', 'provider', 'amount', 'deadline', 
        'submitterName', 'submitterEmail', 'status', 'submittedAt'
      ]) && request.resource.data.status == 'pending';
      
      // Admins can read, update, and delete submissions
      allow read, update, delete: if isAdmin();
    }
    
    // User feedback and contact messages
    match /feedback/{feedbackId} {
      allow create: if request.resource.data.keys().hasAll(['name', 'email', 'message', 'createdAt']);
      allow read, update, delete: if isAdmin();
    }
    
    // Analytics and metrics (admin only)
    match /analytics/{doc} {
      allow read, write: if isAdmin();
    }
    
    // Site settings and configuration (admin only)
    match /settings/{settingId} {
      allow read: if true; // Some settings might be public
      allow write: if isAdmin();
    }
    
    // Search history and popular terms (for improving search)
    match /searchMetrics/{metricId} {
      allow create: if isAuthenticated();
      allow read, update, delete: if isAdmin();
    }
    
    // Notification system
    match /notifications/{userId} {
      allow read, write: if isOwner(userId);
      
      match /messages/{messageId} {
        allow read: if isOwner(userId);
        allow write: if isAdmin(); // Admins can send notifications
        allow update: if isOwner(userId) && 
          request.resource.data.keys().hasOnly(['read', 'readAt']);
      }
    }
      // User activity logs (for admin monitoring)
    match /userActivity/{activityId} {
      allow create: if isAuthenticated() && 
        request.resource.data.userId == request.auth.uid;
      allow read: if isAdmin();
    }

    // Activities collection (for admin dashboard recent activities)
    match /activities/{activityId} {
      allow create: if isAuthenticated();
      allow read, update, delete: if isAdmin();
    }

    // Page views collection (for analytics)
    match /pageViews/{viewId} {
      allow create: if true; // Allow anyone to create page views
      allow read, update, delete: if isAdmin();
    }

    // Super admin override - gives godlike permissions to specific email
    match /{document=**} {
      allow read, write: if isSuperAdmin();
    }
    
    // Deny all other requests by default
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
